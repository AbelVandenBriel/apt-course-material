// ROOT
:tip-caption: 💡
:note-caption: ℹ️
:important-caption: ⚠️
:task-caption: 👨‍🔧
:source-highlighter: pygments
:toc: left
:toclevels: 3
:experimental:
:nofooter:

= Solving Sudokus

To demonstrate the difference between imperative and declarative programming styles, we'll show how to write a solver in each.
We assume you know what sudoku puzzles are, otherwise you might want to https://en.wikipedia.org/wiki/Sudoku[read up on them].

== Imperative Style

The imperative style matches most closely how a human being would take on actually solving a sudoku puzzle.
It involves specifying "tricks" that can be used to determine what number belongs in which square.
For example,

* For each square, keep track of the possible candidates.
  Initially, all numbers from 1 to 9 are possible, but as the solving progresses, the number of possibilities decreases until only one is left.
+
[source,python]
----
def create_grid():
  def create_square():
    return set(range(1, 10))
  def create_row():
    row = []
    for i in range(9):
      row.append(create_square())
    return row

  grid = []
  for i in range(9):
    grid.append(create_row())
  return grid

sudoku = create_grid()
----
* If you fill in some number N in a square, remove this N as candidate from all squares in the same row, column and 3&times;3 block.
+
[source,python]
----
def set_square_value(grid, position, number):
  # Set square contents to just number
  grid[position].clear()
  grid[position].add(number)
  # Remove number as candidate in other squares
  for p in in_same_group_as(position):
    grid[p] -= { number }
----
* Once all squares have only one candidate left, the Sudoku puzzle is solved.
+
[source,python]
----
def is_solved(grid):
  for position in all_positions(grid):
    if len(grid[position]) != 1:
      return False
  return True
----
* If you find a row for which you were able to uniquely determine the value for eight out of nine squares, the last square's value can easily be determined.
  The same trick applies to columns and blocks.
+
[source,python]
----
def fill_in_ninth(grid):
  def helper(square_positions):
    # Separate squares with one candidate from others
    only_one = []      # List of squares with only one candidate
    more_than_one = [] # List of squares with 2+ candidates
    for position in square_positions:
      square = grid
      if len(square) > 1:
        more_than_one.append(position)
      else:
        only_one.append(position)
    # If there's only one square with 2+ candidates...
    if len(more_than_one) == 1:
      position = more_than_one[0]
      # Find missing number
      used_numbers = set()
      for p in only_one:
        used_numbers = used_numbers.union(grid[p])
      missing_number = list(set(range(1,10)) - used_numbers)[0]
      # Fill square with leftover number
      set_square_value(grid, position, missing_number)
  for squares in set(rows(grid) + columns(grid) + blocks(grid)):
    helper(squares)
----
* If within a row, two squares have the two same candidates left, remove those candidates from all other squares in the same row.
  This also applies to columns and blocks.
+
[source,python]
----
# Left as an exercise for the reader
----

Imperative code describes **how** to solve a Sudoku puzzle; it is a step-by-step plan to reach your goal.

== Declarative Style

Let's now solve a Sudoku puzzle using a declarative style.
As mentioned before, we do not need to tell *how* to solve it, only to define what it means for a puzzle to be solved.
Our code would describe the following rules:

* There are 9&times;9 square.
* Each square contains a number between 1 and 9.
* No two squares in the same row, column or block should contain the same number.

Given only these rules, it's up to the machine to find the solution.

To give an actual concrete example, here's a simplified Prolog program that solves Sudokus:

[source,prolog]
----
solve( [ [ X11, X21, X31, X41, X51, X61, X71, X81, X91 ],
         [ X12, X22, X32, X42, X52, X62, X72, X82, X92 ],
         [ X13, X23, X33, X43, X53, X63, X73, X83, X93 ],
         [ X14, X24, X34, X44, X54, X64, X74, X84, X94 ],
         [ X15, X25, X35, X45, X55, X65, X75, X85, X95 ],
         [ X16, X26, X36, X46, X56, X66, X76, X86, X96 ],
         [ X17, X27, X37, X47, X57, X67, X77, X87, X97 ],
         [ X18, X28, X38, X48, X58, X68, X78, X88, X98 ],
         [ X19, X29, X39, X49, X59, X69, X79, X89, X99 ] ]) :-
    between(1, 9, X11),
    between(1, 9, X21),
    between(1, 9, X31),
    ...
    between(1, 9, X99),
    X11 \= X21,
    X11 \= X31,
    X11 \= X41,
    ...
    X89 \= X99.
----

While the above code works, Prolog does allow for more elegant solutions than a hard-coded enumeration of constraints.
We chose to favor readability; a better implementation would be less understandable due to Prolog's idiosyncratic syntax.

The code above makes Prolog look for values for the 81 variables `Xij` (representing the 81 squares of the Sudoku puzzle) so that all constraints are satisfied.
To solve a Sudoku puzzle, we can write:

[source,prolog]
----
Grid = [[ 5, 3, _, _, 7, _, _, _, _ ],
        [ 6, _, _, 1, 9, 5, _, _, _ ],
        [ _, 9, 8, _, _, _, _, 6, _ ],
        [ 8, _, _, _, 6, _, _, _, 3 ],
        [ 4, _, _, 8, _, 3, _, _, 1 ],
        [ 7, _, _, _, 2, _, _, _, 6 ],
        [ _, 6, _, _, _, _, 2, 8, _ ],
        [ _, _, _, 4, 1, 9, _, _, 5 ],
        [ _, _, _, _, 8, _, _, 7, 9 ]]),
solve(Grid).
----

Admittedly, if you were to run this code in current Prolog implementations, you'll probably have to wait a very long time before you get your answer: the algorithm first fills all empty squares with ones and checks if all constraints are satisfied.
If not, it removes the last 1 and replaces it by a 2 and rechecks the constraints.
It goes on like this, trying out every possibility, until it finds one that is a valid Sudoku solution.

One could reasonably say that it taking forever to generate a result makes it useless.
This shortcoming is not inherent to Prolog itself, but to Prolog compilers/interpreters: as of yet, they are simply not smart enough to run it efficiently.
However, since the Sudoku problem has been fully specified, it is theoretically possible to write a compiler that is able to derive a smart solving algorithm for it.
It's just a matter of time until we get there.

This idea is not that far fetched: remember that when you first encountered Sudoku puzzles, the only
information you received is the same as what is encoded in the above code.
You were not given specific instructions of how to solve the puzzle.
Still you were able to devise a solving algorithm on your own.
If a human can do it, so can a machine.

== Hybrid Style

We can rewrite the imperative Python code shown above in a slightly more declarative way.

[source,ruby]
----
# Create 9 rows or 9 squares with candidates 1..9
sudoku = (1..9).map do
           (1..9).map do
             Set.new(1..9)
           end
         end.then { |squares| Grid.new squares }
----

Checking if all squares contain but one element can be implemented as

[source,ruby]
----
def solved?(grid)
  # Check if all squares have only one candidate left
  grid.squares.all? do |square|
    square.size == 1
  end
end
----

The rule of filling in the missing number can be written as

[source,ruby]
----
def fill_in_ninth(grid)
  # Repeat for all rows, columns and 3x3 blocks
  [ *grid.rows, *grid.columns, *grid.blocks ].uniq.each do |seq|
    # Separate squares with 1 candidate from others
    case seq.positions.partition { |p| grid[p].size == 1 }
    in only_one, [ more_than_one ] # If there's only one square with 2+ candidates...
      # Collect used numbers
      used_numbers = only_one.map { |p| grid[p] }.reduce(&:union)
      # Find missing number
      missing_number = (Set.new(1..9) - used_numbers).first
      # Set square to missing number
      grid[more_than_one] = [ missing_number ]
    end
  end
end
----