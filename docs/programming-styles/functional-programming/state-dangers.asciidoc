// ROOT
:tip-caption: üí°
:note-caption: ‚ÑπÔ∏è
:important-caption: ‚ö†Ô∏è
:task-caption: üë®‚Äçüîß
:source-highlighter: pygments
:toc: left
:toclevels: 3
:experimental:
:nofooter:
:stem:

= The Dangers of State

State allows things to be changed.
Some may find that automatically allowing change is more flexible.
However, there are risks associated with this.
In this section, we give a few examples where state actually complicates things.

include::breaking-abstraction.asciidoc[leveloffset=1]
include::collections.asciidoc[leveloffset=1]
include::concurrency.asciidoc[leveloffset=1]

== Conclusion

The above examples should convince you (at least a little bit) that immutable objects can simplify your life:

* You do not need to make sure you copy them everywhere at the right times, lest you want hard to track bugs to pop up.
* Immutable objects _can_ lead to more efficient code, e.g., no need for copying or synchronization.
* The straightforward/naive implementation in an imperative setting is quite prone to bugs, whereas the functional approach does not require extra thought to be correct.
