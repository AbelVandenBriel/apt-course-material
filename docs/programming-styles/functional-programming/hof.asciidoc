= Higher Order Functions

A *higher order function* is a function that takes a function as parameter and/or returns one.
For this to be possible, functions need to be first class citizens.
Fortunately, most modern languages do consider functions to be first class citizens.

== Conditionals

Let us examine the `if` construct from up close.
Its exact form varies from language to language, but we can generally distinguish three parts:

* There's a condition, i.e., an expression that evaluates to a boolean value.
* There's a block of code to be executed if the condition evaluates to true.
* There's another block of code to be executed if the condition evaluates to false.
  Some languages allow us to omit this block, but we can just pretend they associate the empty block with false.

=== Rolling Our Own

Some languages however have no built-in support for `if` at all.
These languages generally offer ``if``'s functionality as a library function instead of a language feature.
Let us try to find a way to build our own `if` in TypeScript, which we'll call `myIf`.
We need to be able to rewrite the code below using our own implementation:

[source,typescript]
----
if ( condition )
{
    /* then-clause */
}
else
{
    /* else-clause */
}
----

As explained above, there are three components.
Our `myIf` will therefore be a function that takes three parameters.

[source,typescript]
----
function myIf(condition : any, thenClause : any, elseClause : any) : any
{
    // ???
}
----

Right now, we left the parameter types and return type unspecified, i.e., we use `any` which allows values of any type.
We would prefer to have more specific types though.

=== Return Type

We distinguish between statements and expressions:

* An *expression* evaluates to a certain value.
* A *statement* does not. It is simply executed for its side effects.

Many languages choose to omit statements altogether, because it is an unnecessary complication.
Such languages model statements as expressions returning their equivalent of `void`.

In many languages, among which JavaScript and TypeScript, the `if` construct is a statement, meaning we can use `void` as ``myIf``'s return type.

[source,typescript]
----
function myIf(condition : any, thenClause : any, elseClause : any) : void
{
    // ???
}
----

=== Condition

The condition parameter is easy to deal with: it should be clear that it needs to be a boolean value.

[source,typescript]
----
function myIf(condition : boolean, thenClause : any, elseClause : any) : void
{
    // ???
}
----

=== Clauses

Now comes the interesting part: `thenClause` and `elseClause` are supposed to be blocks of code.
How can we pass blocks of code to `myIf`?

The answer is quite simple: functions.
A function is in essence nothing more than an "object" than contains a block of code.
Typically functions support only one operation, namely the _function call_, which causes the block of code to be run.

So, let us put this `thenClause` and `elseClause` in functions:

[source,typescript]
----
function thenClause() : void { /* thenClause */ }
function elseClause() : void { /* elseClause */ }

myIf(condition, thenClause, elseClause);
----

Having to define two functions for each conditional might be asking a bit much.
Luckily, we can rely on lambdas:

[source,typescript]
----
myIf(condition, () => /* thenClause */, () => /* elseClause */);
----

Both parameters are functions that take zero arguments and don't return a value.
This type is written `() => void` in TypeScript.
This allows us to put the finishing touches on ``myIf``'s signature:

[source,typescript]
----
function myIf(condition : boolean,
              thenClause : () => void,
              elseClause : () => void) : void
{
    // ???
}
----

=== Implementation

Only ``myIf``'s body remains.
The straightforward way would be to write

[source,typescript]
----
function myIf(condition : boolean,
              thenClause : () => void,
              elseClause : () => void) : void
{
    if ( condition )
        thenClause();
    else
        elseClause();
}
----

While this would work, it feels a bit like cheating: we're using `if` in ``myIf``'s definition.
Languages without `if` do offer ways to implement `if` without cheating.
However, JavaScript is not one of these languages and doesn't cooperate here.
The best way I could find to implement `myIf` without `if` is to rely on the short-circuiting behavior of the `&&` and `||` operators`:

[source,typescript]
----
function myIf(condition : boolean,
              thenClause : () => void,
              elseClause : () => void) : void
{
    (condition && thenClause()) || (!condition && elseClause());
}
----

=== If Expression

As explained earlier, `if` is a statement in many languages, such as C, C++, C#, Java, JavaScript, TypeScript and Python.
However, having an `if` *expression* can come in handy, which is why these languages provide an alternative to `if`:

[source,java]
----
var result = condition ? ifTrue : ifFalse;
----

[source,python]
----
result = ifTrue if condition else ifFalse
----

Generally you'll want both clauses to return a value of the same type.

We can turn our `myIf` into an expression by letting the clauses return a value:

[source,typescript]
----
function myIf<T>(condition : boolean,
                 thenClause : () => T,
                 elseClause : () => T) : T
{
    if ( condition )
        return thenClause();
    else
        return elseClause();
}
----

[NOTE,caption={cakepoint}]
.Cakepoint Opportunity
====
Why not simply implement `myIf` as shown below?

[source,typescript]
----
function myIf<T>(condition : boolean,
                 thenClause : T,
                 elseClause : T) : T
{
    if ( condition )
        return thenClause;
    else
        return elseClause;
}
----
====

== Conclusion

Implementing an `if` as a function is not very useful in a language that has conditionals built-in.
The point of this section was to show that we can easily use functions to represent blocks of code.

= Loops

Let's give loops the same treatment as we did conditionals in the previous section.

== `myWhile`

We start off by simulate our own `while` loop using functions.
We'll call this function `myWhile`.

Using the same approach as before, we start off by identifying the different components of a `while` loop:

[source,typescript]
----
while ( condition )
{
    /* body */
}
----

* There's again a condition.
* Instead of having two clauses, a `while` has just one body.
* A `while` is a statement: it does not evaluate to a value.

Based on this information, we could try the following implementation:

[source,typescript]
----
function myWhile(condition : boolean,
                 body : () => void) : void
{
    if ( condition )
    {
        body();
        myWhile(condition, body);
    }
}
----

This first attempt has a fatal flaw.

[source,typescript]
----
let i = 0;
myWhile(i < 10, () => ++i);
----

The above code will cause the looping to never end (technically, this isn't true: it will end in stack overflow error.)
This is due to the condition `i < 10` being evaluated once when `myWhile` gets called.
At that time, `i < 10` evaluates to `true`.
This same value is reused by the `if` statement that controls whether another iteration is necessary.
In other words, `myWhile` either does not execute its body, or it executes it an infinite number of times.

To remedy this, we need to see the condition not as boolean value, but as a code block (i.e., function) that returns a boolean value.
This allows us to *reevaluate* the condition before every iteration.

[source,typescript]
----
function myWhile(condition : () => boolean,
                 body : () => void) : void
{
    if ( condition() )
    {
        body();
        myWhile(condition, body);
    }
}
----

Usage thus becomes

[source,typescript]
----
let i = 0;
myWhile(() => i < 10, () => ++i);
----

== Refactoring Algorithms

Consider the code below:

[source,ruby]
----
def mul2(x)
    x * 2
end

def mul3(x)
    x * 3
end

def mul4(x)
    x * 4
end
----

Clearly, this code could be improved upon by factoring out the multiplication constant and turning it into a parameter:

[source,ruby]
----
def mul(x, y)
    x * y
end
----

It's a silly example, but you probably make similar mistakes without noticing, especially when it comes to the possibility of factoring out *code*.

=== Initial Imperative Version

We introduce a class `Evaluation` with fields `student`, `grade` and `course`.
Their meanings should be clear.

[source,ruby]
----
Evaluation = Struct.new :student, :grade, :course
----

Examine the source code below and try to find out what it does.

[source,typescript,linenums]
----
function top_students(evaluations : Evaluation[]) : { [key : string] : string[] }
{
    const evaluations_by_course : { [key : string] : Evaluation[] } = {};

    for ( const evaluation of evaluations )
    {
        if ( evaluation.grade >= 10 )
        {
            if ( !(evaluation.course in evaluations_by_course) )
            {
                evaluations_by_course[evaluation.course] = [];
            }

            const course_evaluations = evaluations_by_course[evaluation.course];

            let i = 0;
            while ( i < course_evaluations.length &&
                    evaluation.grade < course_evaluations[i].grade )
            {
                ++i;
            }

            course_evaluations.splice(i, 0, evaluation);

            if ( course_evaluations.length > 3 )
            {
                course_evaluations.pop();
            }
        }
    }

    const result : { [key : string] : string[] } = {};

    for ( const course in evaluations_by_course )
    {
        const students = [];

        for ( const evaluation of evaluations_by_course[course] )
        {
            students.push(evaluation.student);
        }

        result[course] = students;
    }

    return result;
}
----

[%collapsible]
.Click to see what the code does
====
=====
The code determines the top 3 students for each course.
=====
====

This code is in desperate need of refactoring.
By doing so,

* the code will become easier to read and self-documenting;
* the code will be split into reusable parts.

=== Adding Comments

We start off by adding some comments.

[source,typescript]
----
function top_students(evaluations : Evaluation[]) : { [key : string] : string[] }
{
    const evaluations_by_course : { [key : string] : Evaluation[] } = {};

    for ( const evaluation of evaluations )
    {
        // Ignore failing evaluations
        if ( evaluation.grade >= 10 )
        {
            // Add default value [] for new keys
            if ( !(evaluation.course in evaluations_by_course) )
            {
                evaluations_by_course[evaluation.course] = [];
            }

            const course_evaluations = evaluations_by_course[evaluation.course];

            // course_evaluations is sorted by descending grade
            // Insert evaluation into this array, respecting the order
            let i = 0;
            while ( i < course_evaluations.length &&
                    evaluation.grade < course_evaluations[i].grade )
            {
                ++i;
            }

            course_evaluations.splice(i, 0, evaluation);

            // Keep only first three elements
            if ( course_evaluations.length > 3 )
            {
                course_evaluations.pop();
            }
        }
    }

    // Extract student names from evaluations
    const result : { [key : string] : string[] } = {};

    for ( const course in evaluations_by_course )
    {
        const students = [];

        for ( const evaluation of evaluations_by_course[course] )
        {
            students.push(evaluation.student);
        }

        result[course] = students;
    }

    return result;
}
----

=== `find_index`

We focus on the highlighted code fragment.

[source,typescript,highlight='20-26']
----
function top_students(evaluations : Evaluation[]) : { [key : string] : string[] }
{
    const evaluations_by_course : { [key : string] : Evaluation[] } = {};

    for ( const evaluation of evaluations )
    {
        // Ignore failing evaluations
        if ( evaluation.grade >= 10 )
        {
            // Add default value [] for new keys
            if ( !(evaluation.course in evaluations_by_course) )
            {
                evaluations_by_course[evaluation.course] = [];
            }

            const course_evaluations = evaluations_by_course[evaluation.course];

            // course_evaluations is sorted by descending grade
            // Insert evaluation into this array, respecting the order
            let i = 0;
            while ( i < course_evaluations.length &&
                    evaluation.grade < course_evaluations[i].grade )
            {
                ++i;
            }

            course_evaluations.splice(i, 0, evaluation);

            // Keep only first three elements
            if ( course_evaluations.length > 3 )
            {
                course_evaluations.pop();
            }
        }
    }

    // Extract student names from evaluations
    const result : { [key : string] : string[] } = {};

    for ( const course in evaluations_by_course )
    {
        const students = [];

        for ( const evaluation of evaluations_by_course[course] )
        {
            students.push(evaluation.student);
        }

        result[course] = students;
    }

    return result;
}
----

This code finds the index `i` of the first `Evaluation` for which `evaluation.grade >= course_evaluations[i]`.
We extract the highlighted piece of code to a separate function.

[source,typescript,highlight='1-12;33']
----
function find_index(evaluations : Evaluation[], evaluation : Evaluation) : number
{
    let i = 0;

    while ( i < evaluations.length && evaluation.grade < evaluations[i].grade )
    {
        ++i;
    }

    return i;
}

function top_students(evaluations : Evaluation[]) : { [key : string] : string[] }
{
    const evaluations_by_course : { [key : string] : Evaluation[] } = {};

    for ( const evaluation of evaluations )
    {
        // Ignore failing evaluations
        if ( evaluation.grade >= 10 )
        {
            // Add default value [] for new keys
            if ( !(evaluation.course in evaluations_by_course) )
            {
                evaluations_by_course[evaluation.course] = [];
            }

            const course_evaluations = evaluations_by_course[evaluation.course];

            // course_evaluations is sorted by descending grade
            // Insert evaluation into this array, respecting the order
            let i = find_index(evaluation, course_evaluations);
            course_evaluations.splice(i, 0, evaluation);

            // Keep only first three elements
            if ( course_evaluations.length > 3 )
            {
                course_evaluations.pop();
            }
        }
    }

    // Extract student names from evaluations
    const result : { [key : string] : string[] } = {};

    for ( const course in evaluations_by_course )
    {
        const students = [];

        for ( const evaluation of evaluations_by_course[course] )
        {
            students.push(evaluation.student);
        }

        result[course] = students;
    }

    return result;
}
----

The function `find_index` is hardly reusable.
In fact, this refactoring merely moved a bit of code to another place, with limited benefits.
Let's generalize this function a bit.

=== `find_index` v2.0

Finding the index of an element is a clean, intuitive operation.
Right now, this element is hardcoded as the first one for which `evaluation.grade >= evaluations[i].grade`.
We can generalize this by factoring out the condition:

[source,typescript]
----
function find_index(evaluations : Evaluation[],
                    predicate : (evaluation : Evaluation) => boolean) : number
{
    let i = 0;

    while ( i < evaluations.length && !predicate(evaluations[i]) )
    {
        ++i;
    }

    return i;
}
----

Note how we introduced the `predicate` parameter: it is a function that takes an `Evaluation` and returns a `boolean`.
`find_index` will go through the list `evaluations` and return the index of the first evaluation for which `predicate` returns `true`.

What happens if no `Evaluation` satisfies `predicate`?
In this case, it appears that we return an invalid index, i.e., one past the last valid index.
This is a bit iffy: this makes it "difficult" for the client to determine whether the return value is indeed a valid index.
We'd prefer to return a more easily identifiable value.

Let's first rewrite it using a `for`-loop, since this will improve the code's readability:

[source,typescript]
----
function find_index(evaluations : Evaluation[],
                    predicate : (evaluation : Evaluation) => boolean) : number
{
    for ( let i = 0; i !== evaluations.length; ++i )
    {
        if ( predicate(evaluations[i]) )
        {
            return i;
        }
    }

    return /* ??? */;
}
----

We could use `-1` to represent "no such item", as is the case in Java.
This is a terrible idea however: the client could still get away with not checking the return value and use it as an index anyway, causing a runtime error to occur.
It is better to force to user to check and to check this happens at compile time.
This can be achieved in TypeScript by returning `null`:

[source,typescript]
----
function find_index(evaluations : Evaluation[],
                    predicate : (evaluation : Evaluation) => boolean) : number | null
{
    for ( let i = 0; i !== evaluations.length; ++i )
    {
        if ( predicate(evaluations[i]) )
        {
            return i;
        }
    }

    return null;
}
----

If the client fails to check for `null`, TypeScript will complain:

[source,typescript]
----
const i = find_index(evaluations, e => e.grade >= 10);
const evaluation = evaluations[i]; // error: i could be null
----

We update our `top_students` function:

[source,typescript,linenums,highlight='20']
----
function top_students(evaluations : Evaluation[]) : { [key : string] : string[] }
{
    const evaluations_by_course : { [key : string] : Evaluation[] } = {};

    for ( const evaluation of evaluations )
    {
        // Ignore failing evaluations
        if ( evaluation.grade >= 10 )
        {
            // Add default value [] for new keys
            if ( !(evaluation.course in evaluations_by_course) )
            {
                evaluations_by_course[evaluation.course] = [];
            }

            const course_evaluations = evaluations_by_course[evaluation.course];

            // course_evaluations is sorted by descending grade
            // Insert evaluation into this array, respecting the order
            const i = find_index(evaluation, e => evaluation.grade >= e.grade) || course_evaluations.length;
            course_evaluations.splice(i, 0, evaluation);

            // Keep only first three elements
            if ( course_evaluations.length > 3 )
            {
                course_evaluations.pop();
            }
        }
    }

    // Extract student names from evaluations
    const result : { [key : string] : string[] } = {};

    for ( const course in evaluations_by_course )
    {
        const students = [];

        for ( const evaluation of evaluations_by_course[course] )
        {
            students.push(evaluation.student);
        }

        result[course] = students;
    }

    return result;
}
----

Note how we use some JavaScript trickery to deal with the potential `null`: we use the `||` operator to convert it to another value.

=== `find_index` v3.0

While our `find_index` function can now deal with arbitrary conditions, it still has one major drawback: it only works with `Evaluation` objects.
Finding the index of an element satisfying a certain condition should be possible on values of _any_ type, not just ``Evaluation``s.
This calls for generics: we replace every occurrence of `Evaluation` by a type parameter `T`.
We also update the variable names.

[source,typescript]
----
function find_index<T>(ts : T[], predicate : (t : T) => boolean) : number | null
{
    for ( let i = 0; i !== ts.length; ++i )
    {
        if ( predicate(ts[i]) )
        {
            return i;
        }
    }

    return null;
}
----

[NOTE,caption={cakepoint}]
.Cakepoint opportunity
====
We could always generalize `find_index` further.
Do you have improvements in mind?
====

