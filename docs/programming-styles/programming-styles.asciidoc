// ROOT
:tip-caption: üí°
:note-caption: ‚ÑπÔ∏è
:important-caption: ‚ö†Ô∏è
:task-caption: üë®‚Äçüîß
:source-highlighter: rouge
:toc: left
:toclevels: 3
:experimental:
:nofooter:

= Programming Styles

== Introduction

When you write a programming in, say, JavaScript, you are probably mixing different styles of programming without realizing it.
Not that there's anything wrong with using different styles: it is nearly inevitable.
It's certainly impractical to write code purely in a single style, given that each style has distinct advantages and disadvantages.
However, being aware of programming styles and knowing which style to apply in which circumstances might help you become a better programmer.

IMPORTANT: Before we start examining the different styles: you should not expect clear cut definitions that will allow you to label any piece of code as being 100% written in a particular style.
There's a lot of vagueness and hand waving involved.
To those who find this frustrating: do not despair.
What's important is what actual concepts you use to build up your program, not how you label the final product.

There are https://en.wikipedia.org/wiki/Programming_paradigm[many programming paradigms].
In this context, we will focus on imperative programming vs. declarative programming.
Here's a short overview:

* Imperative programming (https://en.wikipedia.org/wiki/Imperative_programming[Wikipedia])
** Procedural (https://en.wikipedia.org/wiki/Procedural_programming[Wikipedia])
** Object-oriented (https://en.wikipedia.org/wiki/Object-oriented_programming[Wikipedia])
* Declarative programming (https://en.wikipedia.org/wiki/Declarative_programming[Wikipedia])
** Functional (https://en.wikipedia.org/wiki/Functional_programming[Wikipedia])
** Logic (https://en.wikipedia.org/wiki/Logic_programming[Wikipedia])
** Dataflow (https://en.wikipedia.org/wiki/Dataflow_programming[Wikipedia])

The imperative style is what you are most familiar with.
An imperative programming tells the computer *how* to produce a result.
Typically, an imperative program consists of a succession of instructions that have to be executed in order.
Writing in assembly is probably the purest form of imperative programming.

The declarative style, however, simply _describes_ the final result and prefers not preoccupy itself with how to actually find it.
The intent is that the machine itself devises a way of how to efficiently solve the problem.

To make this distinction clearer, we show how <<solving-sudokus.asciidoc#,Sudoku puzzles are solved in both paradigms>>.

## Imperative Programming

When you're writing code, you're probably writing it mostly in an imperative style.
We distinguish two "substyles":

* Imperative programming
** Procedural
** Object-Oriented

Imperative programming is characterized by the fact that programs are long series of instructions that need to be executed in the given order.
The way these instructions are organized is what distinguishes procedural from object-oriented programming.

### Procedural Programming

Procedural programming is quite old, which often means it involves only basic concepts.

* Code is organized as a bunch of *procedures*, which are essentially the same thing as what you call functions.
* Related data is bundled in *records*, which are basically Java/C#/C++ objects containing public fields exclusively.

.fraction.c
[source,c]
----
// Example in C-like language

// Fraction record
struct Fraction
{
    int numerator;
    int denominator;
};

// Procedure for creating fractions
Fraction create_fraction(int numerator, int denominator)
{
    Fraction f;

    f.numerator = numerator;
    f.denominator = denominator;

    return f;
}

// Procedure to multiply fractions
Fraction multiply(Fraction a, Fraction b)
{
    Fraction f;

    f.numerator = a.numerator * b.numerator;
    f.denominator = a.denominator * b.denominator;

    return f;
}

// Usage
Fraction a = create_fraction(1, 2);
Fraction b = create_fraction(3, 4);
Fraction c = multiply(a, b);
----

=== Object-Oriented Programming

Object-oriented programming is a more advanced form of procedural programming: functions and the data are grouped into *objects*.

[source,csharp]
----
// Example in C#
class Fraction
{
    public Fraction(int numerator, int denominator)
    {
        this.Numerator = numerator;
        this.Denominator = denominator;
    }

    public int Numerator { get; set; }
    public int Denominator { get; set; }

    public Fraction Multiply(Fraction that)
    {
        var numerator = this.Numerator * that.Numerator;
        var denominator = this.Denominator * that.Denominator;

        return new Fraction(numerator, denominator);
    }

    public static Fraction operator *(Fraction left, Fraction right)
    {
        return left.Multiply(right);
    }
};

// Usage
Fraction a = new Fraction(1, 2);
Fraction b = new Fraction(3, 4);
Fraction p = a * b;
----

The goal is to provide better abstraction.
Whereas data is public by default in procedural programming, object oriented programming expects us to hide data within objects. 
Access to this data must be mediated by the object's functions, often called methods in the OO world.

Since you should already be quite at ease with OO-programming, we need not delve into this particular programming style.

== Declarative Programming

As a quick reminder, we repeat the substyles of declarative programming:

* Declarative programming
** Logic
** Functional
** Dataflow

=== Logic Programming

Logic programming is quite different from what you're used to, so different even that discussing it would lead us too far away from our original goal, namely providing you with a context in which to place functional programming.

A <<logic-programming.md,short explanation>> is included in a separate file for those interested in having a peek at a fundamentally different programming paradigm, but it can be skipped; we will not refer to it in any way.

=== Functional Programming

We could say that functional programming consists of organizing your code as a bunch of functions, but that wouldn't be very helpful, since it is not clear how it would differ from procedural programming.

Since our goal is to examine functional programming in depth and this text has grown large already, we continue on a <<functional-programming.md,fresh page>>.

=== Reactive Programming

TODO
