= Getters and Setters

== Java

Take a quick look at the code below.

[source,java]
.Java Interval class: public fields
----
public class Interval
{
    public double lowerBound;

    public double upperBound;

    public Interval(double lowerBound, double upperBound)
    {
        this.lowerBound = lowerBound;
        this.upperBound = upperBound;
    }

    public double getWidth() { return upperBound - lowerBound; }
}
----

You were taught never to make fields public, but to define getters and setters instead, as shown below.

[source,java]
.Java Interval class: correct implementation
----
public class Interval
{
    private double lowerBound;

    private double upperBound;

    public Interval(double lowerBound, double upperBound)
    {
        setLowerBound(lowerBound);
        setUpperBound(upperBound);
    }

    public double getLowerBound() { return lowerBound; }
    public double getUpperBound() { return upperBound; }

    public void setLowerBound(double lowerBound) { this.lowerBound = lowerBound; }
    public void setUpperBound(double upperBound) { this.upperBound = upperBound; }

    public double getWidth() { return getUpperBound() - getLowerBound(); }
}
----

But why do this?
Why go to all this extra trouble while clearly the wrong version provides the exact same functionality as the correct version?

The reason is that you never know beforehand how your class will evolve.
Software engineering is not about making your code work, but also prepare it for potential future changes.
For example, in ``Interval``'s case, we could choose to forbid it from having `lowerBound` be greater than `upperBound` (note that this restriction is **not** a particularly good idea.)

In the version with public `lowerBound` and `upperBound` fields, there is no way for us to enforce this rule.
We would need to make the following modifications:

* Prohibit direct access to the fields by making them private.
* Allow the user to read the fields' values by introducing `getLowerBound` and `getUpperBound`.
* Allow the user to change the fields' values by introducing `setLowerBound` and `setUpperBound`.
  Both these methods should validate their inputs and throw an exception in case the rules are violated.

[source,java]
.Java Interval class: correct implementation
----
public class Interval
{
    private double lowerBound;

    private double upperBound;

    public Interval(double lowerBound, double upperBound)
    {
        setLowerBound(lowerBound);
        setUpperBound(upperBound);
    }

    public double getLowerBound() { return lowerBound; }
    public double getUpperBound() { return upperBound; }

    public double getWidth()      { return getUpperBound() - getLowerBound(); }

    public void setLowerBound(double lowerBound)
    {
        if ( lowerBound > upperBound )
        {
            throw new IllegalArgumentException();
        }

        this.lowerBound = lowerBound;
    }

    public void setUpperBound(double upperBound)
    {
        if ( lowerBound > upperBound )
        {
            throw new IllegalArgumentException();
        }

        this.upperBound = upperBound;
    }
}
----

[WARNING]
.Cakepoint opportunity
====
Note that this code contains a bug.
Can you find it?
====

But why not make these changes when necessary?
Originally, no restriction was in place, so no getters or setters were necessary.
Only after the extra rule was imposed did the need arise for them.
We could start off with public fields and then migrate to getters and setters as necessary.

This is a bad idea as the client code would be impacted:

[source,java]
----
var interval = new Interval(0, 10);
interval.upperBound += 1;
----

would need to be updated to

[source,java]
----
var interval = new Interval(0, 10);
interval.setUpperBound(interval.getUpperBound() + 1);
----

If changing a class leads you to have to update client code, you know you've made a design mistake.
One of your main priorities should be to ensure that change can remain localized: you don't want a modification to ripple through your entire code base.
Here, getters and setters form a kind of a "barrier": they allow you to update the class without this affecting the outside world.

In other words, Java forces you to "preventively overengineer" your class so that future changes don't impact other code.
This is known as the **Uniform Access Principle**.

== Uniform Access Principle

[quote, Bertrand Meyer, Object-Oriented Software Construction]
All services offered by a module should be available through a uniform notation, which does not betray whether they are implemented through storage or through computation.

The Uniform Access Principle states that the syntax should not betray whether you are accessing data (a field) or code (a method).
Java uses different syntax for each:

[source,java]
.Java
----
// Field access
object.member

// Method access
object.member()
----

The parentheses betray that you are in fact calling a method.
Java can be said that it violated the Uniform Access Principle.
To circumvent this problem, Java programmers simply pretend there is no such thing as fields: if every (public) member is a method, there is nothing else to be inconsistent with.
All member accesses need parentheses.

This approach works, but as mentioned above, it requires a bit of boilerplate code, so much so that Java IDEs provide ways to automatically generate getters and setters for you.
It is the opinion of this writer that any language that requires such code generation is severely flawed.

But how do other languages solve this problem?

== C#

C#'s https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties[properties] allow you to gracefully turn data (fields) into code.
Let's start with public fields:

[source,csharp]
.C# Interval with public fields
----
public class Interval
{
    public Interval(double lowerBound, double upperBound)
    {
        this.LowerBound = lowerBound;
        this.UpperBound = upperBound;
    }

    public double LowerBound;

    public double UpperBound;

    public double Width
    {
        get { return UpperBound - LowerBound; }
    }
}
----

We update this code to include the restrictions on `LowerBound` and `UpperBound`:

[source,csharp]
.C# Interval with properties
----
public class Interval
{
    private double lowerBound;

    private double upperBound;

    public Interval(double lowerBound, double upperBound)
    {
        this.LowerBound = lowerBound;
        this.UpperBound = upperBound;
    }

    public double LowerBound
    {
        get { return lowerBound; }
        set
        {
            if ( value > UpperBound )
            {
                throw new ArgumentException();
            }

            this.lowerBound = value;
        }
    }

    public double UpperBound
    {
        get { return upperBound; }
        set
        {
            if ( LowerBound > value )
            {
                throw new ArgumentException();
            }

            this.UpperBound = value;
        }
    }

    public double Width
    {
        get { return UpperBound - LowerBound; }
    }
}
----

Usage of the `Interval` class is the same, regardless of whether `LowerBound` and `UpperBound` are implemented as regular fields or properties:

[source,csharp]
.C#, usage of Interval
----
var interval = new Interval(0, 10);
interval.UpperBound += 10;
----

In the case that `UpperBound` is a property, ``UpperBound``'s `set` code will be executed where `value` is set to its new value.

[WARNING]
.Cakepoint opportunity
====
There actually still is a Uniform Access Principle violation, but where?
====

Due to this hidden violation, it is still highly recommended not to work with public fields and instead to only expose properties.
In order to limit the need for boilerplate code, C# offers a shorthand notation for getters and setters that perform no additional tasks but getting and setting a variable, respectively.

[source,csharp]
.C# Interval with auto-implemented properties
----
public class Interval
{
    public Interval(double lowerBound, double upperBound)
    {
        this.LowerBound = lowerBound;
        this.UpperBound = upperBound;
    }

    public double LowerBound { get; set; }  // <1>

    public double UpperBound { get; set; }  // <1>

    public double Width => UpperBound - LowerBound;  // <2>
}
----
<1> `{ get; set; }` generates a private field and code that gets and sets this field.
<2> Shorthand syntax expressing that ``Width``'s getter returns `UpperBound - LowerBound`.

As you can see, some boilerplate code is still required in order to preserve the Uniform Access Principle in C#.

== Ruby

Ruby simply does not allow direct access to an object's fields.
Instead, you need to rely on methods.
Does this mean Ruby works the same as Java?
Not quite.

Since public fields are not an option, we are forced to make use of getters and setters.
Translating it straight from Java would give us

[source,ruby]
.Ruby Interval class
----
class Interval
    def initialize(lower_bound, upper_bound)
        @lower_bound = lower_bound  <1>
        @upper_bound = upper_bound
    end

    def get_lower_bound
        return @lower_bound
    end

    def get_upper_bound
        return @upper_bound
    end

    def set_lower_bound(value)
        @lower_bound = value
    end

    def set_upper_bound(value)
        @upper_bound = value
    end
end
----

Here we are again with our getter/setter boilerplate code.
However, Ruby allows you to forgo this by relying on the `attr_accessor` helper method:

[source,ruby]
.Ruby Interval class with metaprogramming
----
class Interval
    def initialize(lower_bound, upper_bound)
        @lower_bound = lower_bound  <1>
        @upper_bound = upper_bound
    end

    attr_accessor :lower_bound, :upper_bound
end
----

`attr_accessor` takes the class currently being defined, `Interval` in our case, and adds methods to it.
Here we ask it to define getters and setters for fields named `lower_bound` and `upper_bound`.
In other words, Ruby allows writing code that dynamically adds methods to a class.

If we need to impose restrictions on `lower_bound` and `upper_bound`, we can replace this `attr_accessor` call by manually defined methods:

[source,ruby]
.Ruby Interval class
----
class Interval
    def initialize(lower_bound, upper_bound)
        @lower_bound = lower_bound  <1>
        @upper_bound = upper_bound
    end

    def lower_bound
        @lower_bound  # <2>
    end

    def upper_bound
        @upper_bound
    end

    def lower_bound=(value)  # <3>
        @lower_bound = value
    end

    def upper_bound=(value)
        @upper_bound = value
    end
end
----
<1> Fields are always private and prefixed with a `@`. It is not possible to access a field from outside the object: `interval.@lower_bound` is syntactically incorrect.
<2> Using ``return`` is optional in Ruby: the value of the expression evaluated last is returned automatically.
<3> Setter method. `interval.lower_bound = 5` calls this method with `value` set to `5`.

When calling a method, parentheses are optional: `foo()` and `foo` are interchangeable.
This syntactic features allows a method call to look like a field access:

[source,ruby]
----
interval = Interval.new
x = interval.lower_bound   # <1>
interval.upper_bound += 1  # <2>
----
<1> Despite the lack of parentheses, this is a method call.
<2> This calls `upper_bound=`.

If such simple validation were common in your code, you could define a new auxiliary methods as follows:

[source,ruby]
----
class Class  # <1>
  def simple_constructor(*symbols)  # <2>
    define_method :initialize do |*args|
      symbols.zip(args).each do |symbol, value|
        instance_variable_set "@#{symbol}", value
      end
    end
  end

  def validated_attr_accessor(symbol, &block)  # <3>
    define_method symbol do
      instance_variable_get "@#{symbol}"
    end

    define_method "#{symbol}=" do |value|
      raise ArgumentError, "Invalid #{symbol}" unless instance_exec(value, &block)
      instance_variable_set "@#{symbol}", value
    end
  end
end

class Interval
  simple_constructor :lower_bound, :upper_bound  # <4>

  validated_attr_accessor(:lower_bound) { |value| value <= upper_bound }  # <5>
  validated_attr_accessor(:upper_bound) { |value| value >= lower_bound }  # <5>
end
----
<1> The `Class` class already exists, but Ruby allows us to "reopen its definition" to add extra members.
<2> `simple_constructor` defines a constructor that simply copies values into fields.
<3> `validated_attr_accessor` adds a getter and a setter that validates its input.
<4> We make use of `simple_constructor` to define a constructor with two parameters whose values are copied in fields named `@lower_bound` and `@upper_bound`, respectively.

== Python

Python fully embraces public fields:

[source,python]
.Python with public fields
----
class Interval:
    def __init__(self, lower_bound, upper_bound):
        self.lower_bound = lower_bound
        self.upper_bound = upper_bound
----

If a field needs to be upgraded to something smarter (e.g. validation), one can turn it into a property:

[source,python]
.Python with properties
----
class Interval:
    def __init__(self, lower_bound, upper_bound):
        self.lower_bound = lower_bound
        self.upper_bound = upper_bound

    @property
    def lower_bound(self):
        return self.__lower_bound

    @lower_bound.setter
    def lower_bound(self, lower_bound):
        if lower_bound > self.upper_bound:
            raise AttributeError()
        self.__lower_bound = lower_bound

    @property
    def upper_bound(self):
        return self.__upper_bound

    @upper_bound.setter
    def upper_bound(self, upper_bound):
        if self.lower_bound > upper_bound:
            raise AttributeError()
        self.__upper_bound = upper_bound
----

There is nothing magical about properties: they are built on top of https://www.python.org/dev/peps/pep-0318/[decorators] and https://docs.python.org/3/howto/descriptor.html[descriptor objects].
