= Iterators

If design patterns can be used to "plug holes" in programming languages, one might conclude that all languages are interchangeable.
However, these plugs can get quite complex and fragile:

* They often involve boilerplate code.
* They can be complex to implement.
* The same code can often not be reused, causing you to have to rewrite code for each separate case.
* Concepts implemented as design patterns are inherently more fragile than having them provided as language features.

In this section, we intend to show that having language support can actually have benefits.


== Java

Let's revisit our `count` algorithm from a previous section.
We generalize it so it can work on any type `T` instead of being restricted to ``Person``s.

[source,java]
----
interface Predicate<T>
{
    boolean call(T argument);
}

<T> int count(ArrayList<T> xs, Predicate<T> predicate)
{
    var result = 0;

    for ( var x : xs )
    {
        if ( predicate.call(x) )
        {
            result++;
        }
    }

    return result;
}
----

This works, and we can be proud that it works on any kind of element, but unfortunately it's still limited in that it only works on ``ArrayList``s.
The current container type (`ArrayList`) is clearly too specific.
In order to make `count` maximally reusable, we need to determine exactly what `count` needs of its argument `xs`.

If we look at the code, we see that `count` merely iterates over `xs`.
It doesn't use indexing, doesn't ask for the size, doesn't remove from or add elements to `xs`.
This means we need to use a container type that *only* exposes iteration.
Any extra operation reduces the number of types which `count` can work on.

Java libraries like to use `Collection`, but this makes little sense as `Collection` exposes way too much functionality.
A better choice would be `Iterable`:

* It provides the method `iterator()` which allows us to iterate over the sequence, which is exactly what we need.
* It provides *only* the method `iterator()`, so it doesn't require anything more than strictly necessary from the client.

[WARNING]
====
While `Iterable` does indeed have only one method `iterator()`, the object it returns allows us to remove elements from a sequence.
Ideally, this operation should not be available.
====

[source,java]
----
<T> int count(Iterable<T> xs, Predicate<T> predicate)
{
    var result = 0;

    for ( var x : xs )
    {
        if ( predicate.call(x) )
        {
            result++;
        }
    }

    return result;
}
----

With only minimal changes, this new version of `count` works on many kinds of collections: `ArrayList`, `HashSet`, `LinkedList`, `TreeSet`, &hellip;
There's a snag though:

* In Java, arrays do not implement `Iterable` for some reason, so `count` can not operate on them.
* `String` suffers from a similar problem: one would expect it to implement `Iterable<Character>`, but it mysteriously does not.
* There are many other classes whose objects one could iterate over, but which is made impossible because they do not implement `Iterable`.

This problem is not limited to `count`: there are _many_ algorithms that simply need to be able to iterate over a sequence of elements.
Each of these will be limited in its applicability. How can we solve this problem?

== Iterators

One solution could be to add implementations of interfaces to existing classes.
That way, we could define `iterate()` for arrays, ``String``s and any other class we need to iterate over.
Unfortunately, Java does not allow this (unlike languages like Go and Haskell.)
Right now, the "iterability" of a class is part of the class itself: the class has to declare it by implementing the `Iterable` interface.
Is there a way to separate the "iterability" from the class?
This is where the Iterator design pattern comes in.

The Iterator design pattern involves having an object that can be used to iterate over a sequence.
A possible implementation would be

[source,java]
----
interface Iterator<T>
{
    T current();        // <1>
    void next();        // <2>
    boolean hasNext();  // <3>
}
----
<1> Returns the element the iterator is currently looking at.
<2> Moves the iterator over to the next element in the sequence.
<3> Checks if there are any elements left.

[NOTE]
====
While Java already provides an `Iterator` interface, we prefer to define our own:

* We want an iterator to be specialized in iterating. Removing items has no business here.
* We provide separate `current()` and `next()` methods: this way each method have more focused responsibilities and it gives us more flexibility later on.
====

Using this interface, we could implement `count` as

[source,java]
----
<T> int count(Iterator<T> iterator, Predicate<T> predicate)
{
    var result = 0;

    while ( iterator.hasNext() )
    {
        iterator.next();

        if ( predicate.call(iterator.current()) )
        {
            result++;
        }
    }

    return result;
}
----

This version of `count` can potentially work with *any* class `C`, since it is always possible to define an `Iterator` subclass specializing in iterator over `C` objects.
For example, here are a couple of potential implementations:

[source,java]
.Adapts a standard Java iterator into our iterator
----
class IteratorAdapter<T> implements Iterator<T>
{
    private final java.util.Iterator<T> wrapped;

    private T current;

    public IteratorAdapter(java.util.Iterator<T> iterator)
    {
        this.wrapped = iterator;
    }

    public T current()
    {
        return current;
    }

    public void moveNext()
    {
        current = wrapped.next();
    }

    public boolean hasNext()
    {
        return wrapped.hasNext();
    }
}
----

[source,java]
.Iterator for arrays
----
class ArrayIterator<T> implements Iterator<T>
{
    private final T[] array;

    private int current;

    public ArrayIterator(T[] array)
    {
        this.array = array;
        this.current = -1;
    }

    public T current()
    {
        return array[current];
    }

    public void moveNext()
    {
        current++;
    }

    public boolean hasNext()
    {
        return current < array.length;
    }
}
----

[source,java]
.Iterator for strings
----
class StringIterator implements Iterator<Character>
{
    private final String string;

    private int current;

    public StringIterator(String string)
    {
        this.string = string;
        this.current = -1;
    }

    public Character current()
    {
        return string.charAt(current);
    }

    public void moveNext()
    {
        current++;
    }

    public boolean hasNext()
    {
        return current < string.length;
    }
}
----

=== Virtual Sequences

Right now, an `Iterator` always receives a "backing collection":

* `IteratorAdapter` relies on a `java.util.Iterator` to feed it items.
* `ArrayIterator` fetches its element from an underlying array.
* `StringIterator` uses a `String` internally.

We can also define iterators that stand on their own, having no internal data structure to store items in.
For example, say we want a list of all numbers, starting from a specific value.
We _could_ create an `ArrayList<Integer>` and start filling it, but that would require a long time as well as an enormous amount of memory.
A more efficient solution would be

[source,java]
----
class NumberIterator implements Iterator<Integer>
{
    private int current;

    public NumberIterator(int initialValue)
    {
        this.current = initialValue;
    }

    public Integer current()
    {
        return current;
    }

    public void moveNext()
    {
        current++;
    }

    public boolean hasNext()
    {
        return true;
    }
}
----

`NumberIterator` can be interpreted as an infinitely long list of increasing integers.
This is a bit of a leaky abstraction, since the limited range of ``int``s will cause the sequence to drop down to `Integer.MIN_VALUE` after exceeding `Integer.MAX_VALUE`, but let's ignore that.

It is important to realize that this "list" does barely occupy any memory, even though it is infinite in size.
This is due to the fact that we use *code* to represent *data*: the data is *generated* by need.

This is made possible thanks to the limited nature of our `Iterator` interface: if there were more operations like, say, item deletion, we would have to keep track of which elements are deleted so as to know which ones to skip, complicating our implementation.
Ironically, we would need to keep a list of the elements _not_ in the list.

== Laziness

We can implement operations as ``Iterator``s.
Say for example, given a list represented by an `Iterator<T>`, we want to produce a new list whose elements satisfy a certain condition represented by some `Predicate<T>`.
We can implement this as follows:

[source,java]
----
class FilteringIterator<T> implements Iterator<T>
{
    private Iterator<T> iterator;

    private final Predicate<T> predicate;

    private T current;

    public FilteringIterator(Iterator<T> list, Predicate<T> predicate)
    {
        this.iterator = list;
        this.predicate = predicate;
    }

    public T current()
    {
        return current;
    }

    public void next()
    {
        current = iterator.current();

        advanceToNext();
    }

    public boolean hasNext()
    {
        return iterator != null;
    }

    private void advanceToNext()
    {
        if ( !iterator.hasNext() )
        {
            iterator = null;
        }
        else
        {
            iterator.next();

            while ( !predicate.call(iterator.current()) )
            {
                if ( !iterator.hasNext() )
                {
                    iterator = null;
                    return;
                }

                iterator.next();
            }
        }
    }
}
----

[NOTE,caption={cakepoint}]
====
The implementation of `FilteringIterator` is rather complex.
This is mostly due to how we defined the `Iterator` interface: it offers the possibility to "peek into the future" through `hasNext()`, which causes trouble.
Can you find a different way to define `Iterator` so that filtering becomes easier to implement?
====

We could have implemented the filtering functionalityh in a more straightforward way:

[source,java]
----
<T> Iterator<T> filter(Iterator<T> iterator, Predicate<T> predicate)
{
    var result = new ArrayList<T>();

    while ( iterator.hasNext() )
    {
        iterator.next();

        var current = iterator.current();
        if ( predicate.call(current) )
        {
            result.add(current);
        }
    }

    return new IteratorAdapter<T>(result);
}
----

This `filter` function returns a _new_ list that contains all the elements of the given list that satisfy a certain condition.
This list consumes extra memory to hold all the "surviving" elements and could take a while to create, depending on the size of the involved lists and the complexity of the predicate.

Using the `FilteringIterator` approach, there is no second list of filtering items.
Instead, we have an `Iterator` that filters elements *on demand*.
It requires very little memory, even if there are actually many items in the filtered result.
If filtering involves heavy computations, these are spread out in time and might even never take place if only part of the resulting list is used.
This kind of on-demand processing is said to be *lazy*.

One important in which both approaches differ is: what happens when the original list is changed after the filtering operation?

* The result returned by `filter` will not notice.
* The `FilteringIterator` list will be impacted: it might go as far as crash in some situations.

We will return to this in a later chapter.

== Generators

Compare the implementations of `filter` and `FilteringIterator`.
They provide (more or less) the same functionality, but their implementation is quite different.
`filter` is a regular function: it takes the lead and actively starts the filtering algorithm, whereas `FilteringIterator` spreads the logic out over multiple methods and fields.
In this writer's opinion, `FilteringIteration` is the more complex of both implementation.

However, laziness has its advantages; it is a pity that it's harder to implement.
Fortunately, some language designers understood the benefits of laziness and decided to add support for it in their language.

One approach, taken by Python, C# and JavaScript, is to provide https://en.wikipedia.org/wiki/Generator_(computer_programming)[*generators*].

=== Python

[source,python]
.Example of a generator
----
def divisible_by(n, divider):
    return n % divider == 0

def primes():
    n = 2
    while True:
        if not any(divisible_by(n, k) for k in range(2, n)):
            yield n
        n += 1
----

`primes()` is not a regular function: when called, none of the function's body is executed.
Instead, a generator object is returned, which represents a sequence of items.
When asked for the first element, ``primes``'s body starts getting executed, up until the first `yield` is reached.
Whatever is ``yield``ed is considered the first element of this list.
In our case, it is the first prime number, `2`.

When the second element of the list is requested, execution continues where it left off and will continue until `yield` is reached a second time.
This occurs due to the fact that execution is stuck in an infinite loop (`while True`).
The second `yield` will produce the second prime number, `3`.

[source,python]
.Printing all primes
----
for prime in primes():
    print(prime)
----

The above loop will never end, as `primes()` returns an infinite list.

=== JavaScript & TypeScript

JavaScript (and by extension also TypeScript) offers the same functionality:

[source,javascript]
----
function divisible_by(n, divider)
{
    return n % divider === 0;
}

function is_prime(n)
{
    for ( let k = 2; k < n; ++k )
    {
        if ( divisible_by(n, k) )
        {
            return false;
        }
    }

    return true;
}

function* primes()  // <1>
{
    let n = 2;

    while ( true )
    {
        if ( is_prime(n) )
        {
            yield n;  // <2>
        }

        n++;
    }
}

for ( const prime of primes() )
{
    console.log(prime);
}
----
<1> Generator functions are declared using `function*` instead of `function`.
<2> JavaScript uses the same `yield` keyword.

[NOTE,caption={cakepoint}]
.Cakepoint opportunity
====
Generators can be easily recognized: they `yield` their result.
Why do you think the extra `*` has been added to `function` to designate generators?
Isn't it redundant?
====

=== C#

[source,csharp]
----
public static bool IsPrime(int n)
{
    return n >= 2 && Range(2, n - 2).All(k => n % k != 0);
}

public static IEnumerable<int> Primes()  // <1>
{
    var n = 2;

    while ( true )
    {
        if (IsPrime(n))
        {
            yield return n;  // <2>
        }

        n++;
    }
}
----
<1> Generators must return an `IEnumerable<T>`.
<2> C# uses `yield return` to produce an element.

== Haskell

In Haskell, everything is lazy by default.
One can simply define a function `primes` that returns an infinite list.
This list will only be generated when its elements are actually required for further computations.

[source,haskell]
----
n `divisibleBy` k = n `rem` k == 0

reject predicate = filter (not . predicate)

primes = aux [2..]
  where
    aux (n:ns) = n : aux (reject (`divisibleBy` n) ns)
----

== Other Examples

The Iterator design pattern has many benefits, but its implementation can be hard to get right.
With the necessary language support, it is possible to reap these benefits without having to write complex code.
Some other examples of design patterns with complex implementations are

* https://en.wikipedia.org/wiki/Visitor_pattern[Visitor]: implementing multiple dispatch in Java requires a lot of copy pasting.
  Languages such as C# and Common Lisp directly support multiple dispatch.
* https://en.wikipedia.org/wiki/Interpreter_pattern[Interpreter]: this is basically developing a whole new language.
  Common Lisp (and variants) is probably the language which allows you to define new mini-languages with the least work.
  With some languages like Ruby you can rely on shallow embedding to define your own mini-languages, albeit with more restrictions than Common Lisp.
* https://en.wikipedia.org/wiki/Active_object[Active Object]: this involves recreating Elixir's processes in Java.
* https://en.wikipedia.org/wiki/Asynchronous_method_invocation[Asynchronous invocation of methods]: C# and JavaScript `async` and `await` can be recreated manually in Java.

== Conclusion

Design patterns generally embody good ideas.
For example, using https://en.wikipedia.org/wiki/State_pattern[State] can often make classes easier to implement thanks to the extra structure it mandates, but unfortunately, it also requires a lot of extra typing.
https://en.wikipedia.org/wiki/Dependency_injection[Dependency Injection] is also a pattern that can also be used universally, but again, it requires that bit of extra work.

If you were to set out to write "really nice code" that follows each of these guidelines and best practices, you'd end up with what would be considered by many as an overengineered monstrosity.
And therein lies the rub: if following best practices requires an inordinate amount of work, no one is going to bother doing the extra work and settle for less.
However, if the language actually _helps_ the programmer writing good code by directly featuring these ideas, the cost of good design becomes much lower.
